From 7169817072a50323b05480357d42bf87271321c7 Mon Sep 17 00:00:00 2001
From: OpenEmbedded <oe.patch@oe>
Date: Mon, 20 Dec 2021 20:45:34 +0000
Subject: [PATCH] Add RGB666 support required for ILI9481 8-bit DBI Type C
 operation

---
 drivers/staging/fbtft/fb_ili9481.c | 58 +++++++++++++++++++++++++++++-
 1 file changed, 57 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/fbtft/fb_ili9481.c b/drivers/staging/fbtft/fb_ili9481.c
index 19eba085ea53..80e5fcc82e41 100644
--- a/drivers/staging/fbtft/fb_ili9481.c
+++ b/drivers/staging/fbtft/fb_ili9481.c
@@ -9,6 +9,7 @@
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/init.h>
+#include <linux/gpio.h>
 #include <linux/delay.h>
 #include <video/mipi_display.h>
 
@@ -33,7 +34,7 @@ static const s16 default_init_sequence[] = {
 	/* Frame rate & inv. */
 	-1, 0xC5, 0x03,
 	/* Pixel format */
-	-1, MIPI_DCS_SET_PIXEL_FORMAT, 0x55,
+	-1, MIPI_DCS_SET_PIXEL_FORMAT, 0x66,
 	/* Gamma */
 	-1, 0xC8, 0x00, 0x32, 0x36, 0x45, 0x06, 0x16,
 		  0x37, 0x75, 0x77, 0x54, 0x0C, 0x00,
@@ -80,6 +81,60 @@ static int set_var(struct fbtft_par *par)
 	return 0;
 }
 
+/* 16 bit convert to 18 bit pixel over 8-bit databus */
+static int write_vmem16_18bus8(struct fbtft_par *par, size_t offset, size_t len)
+{
+	u16 *vmem16;
+	u8 *txbuf = par->txbuf.buf;
+	size_t remain;
+	size_t to_copy;
+	size_t tx_array_size;
+	int i;
+	int ret = 0;
+
+	fbtft_par_dbg(DEBUG_WRITE_VMEM, par, "%s(offset=%zu, len=%zu)\n",
+		__func__, offset, len);
+
+	/* remaining number of pixels to send */
+	remain = len / 2;
+	vmem16 = (u16 *)(par->info->screen_buffer + offset);
+
+	if (par->gpio.dc != -1)
+		gpio_set_value(par->gpio.dc, 1);
+
+	/* number of pixels that fits in the transmit buffer */
+	tx_array_size = par->txbuf.len / 3;
+
+	while (remain) {
+		/* number of pixels to copy in one iteration of the loop */
+		to_copy = min(tx_array_size, remain);
+		dev_dbg(par->info->device, "    to_copy=%zu, remain=%zu\n",
+						to_copy, remain - to_copy);
+
+		for (i = 0; i < to_copy; i++) {
+			u16 pixel = vmem16[i];
+			u16 b = pixel & 0x1f;
+			u16 g = (pixel & (0x3f << 5)) >> 5;
+			u16 r = (pixel & (0x1f << 11)) >> 11;
+
+			u8 r8 = (r & 0x1F) << 3;
+			u8 g8 = (g & 0x3F) << 2;
+			u8 b8 = (b & 0x1F) << 3;
+
+			txbuf[i * 3 + 0] = r8;
+			txbuf[i * 3 + 1] = g8;
+			txbuf[i * 3 + 2] = b8;
+		}
+
+		vmem16 = vmem16 + to_copy;
+		ret = par->fbtftops.write(par, par->txbuf.buf, to_copy * 3);
+		if (ret < 0)
+			return ret;
+		remain -= to_copy;
+	}
+	return ret;
+}
+
 static struct fbtft_display display = {
 	.regwidth = 8,
 	.width = WIDTH,
@@ -88,6 +143,7 @@ static struct fbtft_display display = {
 	.fbtftops = {
 		.set_addr_win = set_addr_win,
 		.set_var = set_var,
+		.write_vmem = write_vmem16_18bus8,
 	},
 };
 
